{"version":3,"sources":["game/cell.js","game/colorPicker.js","game/board.js","App.js","serviceWorker.js","index.js"],"names":["Cell","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","e","onClick","bind","assertThisInitialized","inherits","createClass","key","value","aliveStyle","backgroundColor","aliveColor","deadStyle","deadColor","alive","react_default","a","createElement","className","id","style","React","Component","ColorPicker","setState","displayColorPicker","state","handleClose","handleChange","color","onChange","styles","reactCSS","default","width","height","borderRadius","background","swatch","padding","boxShadow","display","cursor","popover","position","zIndex","right","bottom","cover","top","left","react_color_lib","disableAlpha","Board","createBoard","table","i","grid","length","children","j","push","cell_Cell","toggleCell","row","col","cell","newGrid","nextGeneration","newGridRow","checkNeighbors","numAliveNeighbors","wrapping","rowToCheck","colToCheck","survival","birth","autoGeneration","running","runInterval","setInterval","speed","pauseGeneration","clearInterval","handleInput","target","type","checked","name","defineProperty","handleSurvivalInput","startsWith","newBirth","slice","newSurvival","randomize","Math","random","density","clearBoard","handleAliveColorChange","hex","handleDeadColorChange","cells","cellRow","birthChecks","survivalChecks","birthName","survivalName","disabled","min","max","defaultValue","step","title","colorPicker_ColorPicker","href","class","data-size","aria-label","ReactTimeout","App","game_board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ad3f1ddf.chunk.js","sourcesContent":["import React from 'react';\r\nimport './css/cell.css';\r\n\r\nexport class Cell extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    handleClick = (e) => {\r\n        this.props.onClick(this.props);\r\n    }\r\n\r\n    render() {\r\n        const aliveStyle = {\r\n            backgroundColor: this.props.aliveColor\r\n        }\r\n        const deadStyle = {\r\n            backgroundColor: this.props.deadColor\r\n        }\r\n        if (this.props.alive) {\r\n            return (\r\n                <button className=\"cell\" id=\"aliveCell\" onClick={this.handleClick} style={aliveStyle}></button>\r\n            );\r\n        } else {\r\n            return (\r\n                <button className=\"cell\" id=\"deadCell\" onClick={this.handleClick} style={deadStyle}></button>\r\n            );\r\n        }\r\n        \r\n    }\r\n}","import React from 'react'\r\nimport reactCSS from 'reactcss'\r\nimport { ChromePicker } from 'react-color'\r\n\r\nexport default class ColorPicker extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            displayColorPicker: false,\r\n        };\r\n    }\r\n  \r\n    handleClick = () => {\r\n        this.setState({ displayColorPicker: !this.state.displayColorPicker })\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ displayColorPicker: false })\r\n    };\r\n\r\n    handleChange = (color) => {\r\n        this.props.onChange(color);\r\n    };\r\n\r\n    render() {\r\n        const styles = reactCSS({\r\n            'default': {\r\n                color: {\r\n                    width: '36px',\r\n                    height: '14px',\r\n                    borderRadius: '2px',\r\n                    background: this.props.color,\r\n                },\r\n                swatch: {\r\n                    padding: '5px',\r\n                    background: '#fff',\r\n                    borderRadius: '1px',\r\n                    boxShadow: '0 0 0 1px rgba(0,0,0,.1)',\r\n                    display: 'inline-block',\r\n                    cursor: 'pointer',\r\n                },\r\n                popover: {\r\n                    position: 'absolute',\r\n                    zIndex: '2',\r\n                    right: '0em',\r\n                    bottom: '0em'\r\n                },\r\n                cover: {\r\n                    position: 'fixed',\r\n                    top: '0px',\r\n                    right: '0px',\r\n                    bottom: '0px',\r\n                    left: '0px',\r\n                },\r\n            },\r\n        });\r\n\r\n        return (\r\n            <div>\r\n                <div style={ styles.swatch } onClick={ this.handleClick }>\r\n                <div style={ styles.color } />\r\n                </div>\r\n                { this.state.displayColorPicker ? <div style={ styles.popover }>\r\n                    <div style={ styles.cover } onClick={ this.handleClose }/>\r\n                    <ChromePicker disableAlpha={true} color={ this.props.color } onChange={ this.handleChange } />\r\n                </div> : null }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nimport ReactTimeout from 'react-timeout';\r\nimport './css/board.css';\r\nimport { Cell } from './cell';\r\nimport ColorPicker from './colorPicker';\r\n\r\nclass Board extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        // Generate a new blank grid\r\n        let cells = [];\r\n        for (let i = 0; i < 40; i++) {\r\n            let cellRow = [];\r\n            for (let j = 0; j < 75; j++) {\r\n                cellRow.push(false);\r\n            }\r\n            cells.push(cellRow);\r\n        }\r\n\r\n        //Set default birth/death rates for game of life (B3S23)\r\n        let bir = [false, false, false, true, false, false, false, false, false];\r\n        let surv = [false, false, true, true, false, false, false, false, false];\r\n\r\n        // Create the initial state\r\n        this.state = {\r\n            grid : cells,\r\n            speed: 2,\r\n            density: 0.5,\r\n            running: false,\r\n            wrapping: false,\r\n            birth: bir,\r\n            survival: surv,\r\n            aliveColor: \"#25892D\",\r\n            deadColor: \"#F3F3F3\"\r\n        }\r\n        \r\n        this.nextGeneration = this.nextGeneration.bind(this);\r\n        this.toggleCell = this.toggleCell.bind(this);\r\n        this.autoGeneration = this.autoGeneration.bind(this);\r\n        this.pauseGeneration = this.pauseGeneration.bind(this);\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.handleSurvivalInput = this.handleSurvivalInput.bind(this);\r\n        this.randomize = this.randomize.bind(this);\r\n        this.clearBoard = this.clearBoard.bind(this);\r\n        this.handleAliveColorChange = this.handleAliveColorChange.bind(this);\r\n        this.handleDeadColorChange = this.handleDeadColorChange.bind(this);\r\n    }\r\n    \r\n    // Creates the actual to-be-displayed board of cells based on the staste of the grid array\r\n    createBoard = () => {\r\n        let table = [];\r\n        // Outer loop to create rows of weeks\r\n        for (let i = 0; i < this.state.grid.length; i++) {\r\n            let children = [];\r\n            //Inner loop to create columns of cells\r\n            for (let j = 0; j < this.state.grid[i].length; j++) {\r\n                if (this.state.grid[i][j]) {\r\n                    children.push(<td><Cell onClick={this.toggleCell} alive={true} row={i} col={j} aliveColor={this.state.aliveColor} deadColor={this.state.deadColor}></Cell></td>);\r\n                } else {\r\n                    children.push(<td><Cell onClick={this.toggleCell} alive={false} row={i} col={j} aliveColor={this.state.aliveColor} deadColor={this.state.deadColor}></Cell></td>);\r\n                }\r\n            }\r\n            // Add rows to the parent table\r\n            table.push(<tr>{children}</tr>);\r\n        }\r\n        return table;\r\n    }\r\n\r\n    // Toggles a given cell between dead and alive\r\n    toggleCell = (cell) => {\r\n        let newGrid = this.state.grid;\r\n        if (cell.alive) {\r\n            newGrid[cell.row][cell.col] = false;\r\n        } else {\r\n            newGrid[cell.row][cell.col] = true;\r\n        }\r\n        this.setState({grid: newGrid});\r\n    }\r\n\r\n    // Generates the next generation of the grid\r\n    nextGeneration = (e) => {\r\n        // Create a new grid so that changed cells don't affect results for the current generation\r\n        let newGrid = [];\r\n        for (let i = 0; i < this.state.grid.length; i++) {\r\n            let newGridRow = [];\r\n            for (let j = 0; j < this.state.grid[i].length; j++) {\r\n                newGridRow.push(this.checkNeighbors(i, j));\r\n            }\r\n            newGrid.push(newGridRow);\r\n        }\r\n        this.setState({grid : newGrid});\r\n    }\r\n\r\n    // Checks the neighbors of a given cell's coordinates returning true if the given cell should be alive and false if it should be dead\r\n    checkNeighbors = (row, col) => {\r\n        let numAliveNeighbors = 0;\r\n        for (let i = row - 1; i <= row + 1; i++) {\r\n            for (let j = col - 1; j <= col + 1; j++) {\r\n                if (this.state.wrapping) {\r\n                    let rowToCheck = i;\r\n                    let colToCheck = j;\r\n                    // Check the wrapped around row if checked cell's row is on the edge of the board\r\n                    if (i < 0) {\r\n                        rowToCheck = this.state.grid.length - 1;\r\n                    } else if (i >= this.state.grid.length) {\r\n                        rowToCheck = 0;\r\n                    }\r\n                    // Check the wrapped around column if checked cell's column is on the edge of the baord\r\n                    if (j < 0) {\r\n                        colToCheck = this.state.grid[rowToCheck].length - 1;\r\n                    } else if (j >= this.state.grid[rowToCheck].length) {\r\n                        colToCheck = 0;\r\n                    }\r\n\r\n                    if (this.state.grid[rowToCheck][colToCheck]) {\r\n                        numAliveNeighbors++;\r\n                    }\r\n                } else {\r\n                    // Pass over row if out of bounds\r\n                    if (i < 0 || i >= this.state.grid.length || j < 0 || j >= this.state.grid[0].length) {\r\n                        continue;\r\n                    } else {\r\n                        if (this.state.grid[i][j]) {\r\n                            numAliveNeighbors++;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Decrement the neighbor count to not count itself as an alive neighbor\r\n        if (this.state.grid[row][col]) {\r\n            numAliveNeighbors--;\r\n            return this.state.survival[numAliveNeighbors];\r\n        } else {\r\n            return this.state.birth[numAliveNeighbors];\r\n        }\r\n    }\r\n\r\n    // Runs nextGeneration at a set interval\r\n    autoGeneration = (e) => {\r\n        this.setState({running: true});\r\n        this.runInterval = this.props.setInterval(this.nextGeneration, 1000 / this.state.speed);\r\n    }\r\n\r\n    // Stops the set interval of autoGeneration\r\n    pauseGeneration = (e) => {\r\n        this.setState({running: false});\r\n        this.props.clearInterval(this.runInterval);\r\n    }\r\n\r\n    // Sets the slider values to their appropriate values in the state (speed and density) as well as the checkbox variable for wrapping\r\n    handleInput = (e) => {\r\n        const target = e.target;\r\n        const value = target.type === \"checkbox\" ? target.checked : target.value;\r\n        const name = target.name;\r\n        this.setState({[name]: value});\r\n    }\r\n\r\n    handleSurvivalInput = (e) => {\r\n        let name = e.target.name;\r\n        let checked = e.target.checked;\r\n        if (name.startsWith(\"birth\")) {\r\n            let newBirth = this.state.birth.slice();\r\n            let index = name.slice(-1);\r\n            newBirth[index] = checked;\r\n            this.setState({birth: newBirth});\r\n        } else {\r\n            let newSurvival = this.state.survival.slice();\r\n            let index = name.slice(-1);\r\n            newSurvival[index] = checked;\r\n            this.setState({survival: newSurvival});\r\n        }\r\n    }\r\n\r\n    // Creates a new randomized grid based on the given density value from the slider\r\n    randomize = (e) => {\r\n        let newGrid = [];\r\n        for (let i = 0; i < this.state.grid.length; i++) {\r\n            let newGridRow = [];\r\n            for (let j = 0; j < this.state.grid[i].length; j++) {\r\n                if (Math.random() < this.state.density) {\r\n                    newGridRow.push(true);\r\n                } else {\r\n                    newGridRow.push(false);\r\n                }\r\n            }\r\n            newGrid.push(newGridRow);\r\n        }\r\n        this.setState({grid : newGrid});\r\n    }\r\n\r\n    // Clears the board completely, killing all cells\r\n    clearBoard = (e) => {\r\n        let newGrid = [];\r\n        for (let i = 0; i < 40; i++) {\r\n            let newGridRow = [];\r\n            for (let j = 0; j < 75; j++) {\r\n                newGridRow.push(false);\r\n            }\r\n            newGrid.push(newGridRow);\r\n        }\r\n        this.setState({grid: newGrid});\r\n    }\r\n\r\n    handleAliveColorChange = (color) => {\r\n        this.setState({aliveColor: color.hex});\r\n    }\r\n\r\n    handleDeadColorChange = (color) => {\r\n        this.setState({deadColor: color.hex});\r\n    }\r\n\r\n    render() {\r\n        let birthChecks = [];\r\n        let survivalChecks = [];\r\n        for (let i = 0; i < 9; i++) {\r\n            let birthName = \"birth\" + i;\r\n            let survivalName = \"survival\" + i;\r\n            birthChecks.push(<input name={birthName} type=\"checkbox\" checked={this.state.birth[i]} onChange={this.handleSurvivalInput}></input>);\r\n            birthChecks.push(<label>{i}</label>);\r\n            survivalChecks.push(<input name={survivalName} type=\"checkbox\" checked={this.state.survival[i]} onChange={this.handleSurvivalInput}></input>);\r\n            survivalChecks.push(<label>{i}</label>);\r\n        }\r\n        return(\r\n            <div id=\"board\">\r\n                <table id=\"table\">\r\n                    {this.createBoard()}\r\n                </table>\r\n                <div id=\"options\">\r\n                    <div id=\"simOptions\">\r\n                        <span className=\"optionsHeader\">Simulation Options</span>\r\n                        <div className=\"optionRow\">\r\n                            <div>\r\n                                <span>Auto-Run Speed (iterations per second): {this.state.speed}</span>\r\n                                <input className=\"slider\" id=\"speed\" name=\"speed\" type=\"range\" disabled={this.state.running} min=\"1\" max=\"4\" defaultValue={this.state.speed} onChange={this.handleInput} step=\"1\"/>\r\n                            </div>\r\n                            <div>\r\n                                <button onClick={this.autoGeneration} disabled={this.state.running}>Auto-Run Generation</button>\r\n                                <button onClick={this.pauseGeneration} disabled={!this.state.running}>Pause Generation</button>\r\n                                <button onClick={this.nextGeneration} disabled={this.state.running}>Step Generation</button>\r\n                            </div>\r\n                            <div>\r\n                                <input title=\"Allows the game board to wrap around on itself like in the game Asteroids.\" name=\"wrapping\" type=\"checkbox\" checked={this.state.wrapping} onChange={this.handleInput}></input>\r\n                                <label>Board Wrapping</label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"optionRow\">\r\n                            <div id=\"randomOptions\">\r\n                                <div className=\"row\">\r\n                                    <span>Randomize Cell Density: {this.state.density}</span>\r\n                                    <input className=\"slider\" id=\"density\" name=\"density\" type=\"range\" min=\"0.1\" max=\"0.9\" defaultValue={this.state.density} onChange={this.handleInput} step=\"0.1\"/>\r\n                                </div>\r\n                                <div id=\"buttonRow\">\r\n                                    <button onClick={this.randomize} disabled={this.state.running}>Randomize Cells</button>\r\n                                    <button id=\"clearButton\" onClick={this.clearBoard} disabled={this.state.running}>Clear All</button>\r\n                                </div>\r\n                            </div>\r\n                            <div>\r\n                                <div className=\"row\">\r\n                                    <span>Birth Conditions: </span>\r\n                                    {birthChecks}\r\n                                </div>\r\n                                <div className=\"row\">\r\n                                    <span>Survival Conditions: </span>\r\n                                    {survivalChecks}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div id=\"colorOptions\">\r\n                        <span className=\"optionsHeader\">Color Options</span>\r\n                        <div className=\"optionRow\">\r\n                            <label>Cell Color</label>\r\n                            <ColorPicker color={this.state.aliveColor} onChange={this.handleAliveColorChange}></ColorPicker>\r\n                        </div>\r\n                        <div className=\"optionRow\">\r\n                            <label>Grid Color</label>\r\n                            <ColorPicker color={this.state.deadColor} onChange={this.handleDeadColorChange}></ColorPicker>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div id=\"footer\">\r\n                    <p>Based on <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\">Conway's Game of Life.</a> The default simulation settings are set up to replicate the rules of Conway's game of the life. You can change the settings to simulate <a href=\"https://en.wikipedia.org/wiki/Life-like_cellular_automaton\">other life-like cellular automata.</a></p>\r\n                    <a class=\"github-button\" href=\"https://github.com/vindow/game-of-life\" data-size=\"large\" aria-label=\"Star vindow/game-of-life on GitHub\">Github</a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ReactTimeout(Board);","import React, { Component } from 'react';\nimport Board from './game/board';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Life-like Cellular Automaton Simulator</h1>\n        <Board></Board>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}